// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93ycnIb8Tl7UUtvGCZJ/P58TH5/uOa/DpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHXmYdIZQkkvAFIHdKGaj12ixV4BuUMReOksS9IiGs15W1ZnVEJEHuOShf0sisSl1U/F6CUmSRuy6dIxqMnSRxpzFjmWMnc1mNeCH4oiPqUFxjo3PkfiZqSoEFqpjHmswYoLkkIYwdwlgRsAiJfUaU4iRsRS8NKHPb+CDjYiFFHCFfMDV2/qs4RwibyQh8Y7yngV6OnX8cb2vEkXtiBx03IXoJJKjOIISluK/PIISBa/k4SXeLvWzQDbl7jGAYcUFmwIYhlZPsBGKv8Y3Ya20E65kIGusq9V2rBuvGKwU/9N2YUf4dmT/Ay4o2KTEVnVdRNsSegU2G/ZkVJlu2uJ0MyEr/HOYkZvobYbGJanCTfO4DSpKm3UsBSQI86Anayr1Jawqvn0c9+9jLGFHQ2ksJWFK46qEg7acHDdzI3O6JewVKQ4DKCBYOn+yDw2+D5UVOtmX6R6IsiKs4nIF8ZTHoqDJrjl5JENr+zgTXhHLKFw3PpeH5opMdy1+lOtirXXSqprJQeBzu7+qyK6VLk2yTt+N9yNuWumT29hvISZbvnUvJdrTcF6l6aJQP+tp6/UdGUd7mV8ghgxWw/j6NKZ8LGRI2yJb3Tv7eyd87+R/VyWu830R88hq5Bbmi/q89Qbx8D+/o35egl+JtvDG8uGBle0X2Tn8DP2JQGtml6wZUJLiCDaAvrk/5Ue5BnPL8NJQkn91aqp5y2nKfTT9bpt7ehaVhqEhJ54PorU8YkdlVOy20Ol3tl5T+K4qNhh32Extgt/Y2B1qnlJ+0G0mhRT8Tn+4SQpsE9gPODg6sTr6QFbGCrh/1UvA+WKPcWmxvc73sMmlB1Jnel5an1pM+z1foVBkP7cFohEmYFXUWRRt5M5nbCJhlrxfaYmuTqw2m1nna0eErlBxhr/j/xs8AAAD//2FyhLQRGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2/aMBS+5694IzusqgL3CjisXTVNbVW1aJdqWg08IJKxs9hBq2L/75N/JHaADKRKuyyX+Nl5L9/7vs9OUngsueQLTuGGL6otMklkzlkyJsDIFicDyYvBaJokaQozMqcIfAXXnElkUiR1XRK2Rhje5hSF1kldf1zlFH+aXLiawPCBbFHrDF7q2o9/fErb8UUC0Na4RyHI2pQBcAl3nK3jpNuK0jgR2VLruMQXVm3flf9bIhM5Z00R01dGcYcUwpotFvrUOsN2rafwM5a7fBH3dhpXc8/g5XlBKCnhO6EVwuytQINB2MlsZyYzaSYvkrMVCQK3WIzM4wIIzddsMijz9UYOpmMCmxJXk0FqjDCd8WI8ItPxqHCWaJOTuh7eoFiUeWH8o3UEJQjbeWvo2hvMlguaHS2Zr2D4lYjbHOnSFFRgh6AsLaDgjsyRgoIoE1SiIDMXuDt0Q3+Bitkz9SGzKqrQJqjWWOZ9sYAuvnBPWxT28bpmfF5CtxPXxw2uSEWlVVVr8OEV2L7jJe8EC7DrjcBIbN1EBbcGZj4TYW4P1XaOZR9Dhyy1JPWzFd59lLEOYS42JwjJWc7W+ysO3r+hzi2NP2QZIFvC1vsUsmwa2dcfKu/1rgKzdEqAM9i2nfUyfYq/iIlDBtC02rR/zFgRBz0HYMvH0aPz/3Xm64E1X3u9GQTp8L/ny/BNOcOaf7HlPcoNXzbufMJfFQrZSPOEouBMYBP3SrOvwn64H6v4+2AA9J+2HtL+oeunu2eve95hPivh1CY5kER42hs1/F5KUzj8Sht6h4X5w2r4e+ASBSi4vrxspr6RHWnGj29yw5mPjtMb8QiHW+PIHnCwAr2xWezfnyNjAKMpdKe8FgZyuz2KIl4z2OPY4W9mWnb+BAAA///ASSPYZwoAAA==",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
