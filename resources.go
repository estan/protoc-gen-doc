// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZTW/bOBC9+1cQOu1uECmLbIDFgnaATWoURb6QpL3T0tgmSpGqSDkJBP33gpKsb4lO7Thpm0sQcR5nyOG8N5SMTx99hlYQSir42PrbPrIQcFd4lC/G1uf76eG/1ulkhEmoqMtgMkIIK6oYTG5CoYQrGDoXbuQDV0RRwbGTWUcIxXFI+AKQPaUMZJLoqRJcjdLmwlEc21fEhySpzNWzAxISZJ+DdEMa6Fmpi4rfS5CSLHLXpXNEvbEVx/Y0YixzbGUuqxEvBF90RB2Kq210juyPRE4pME8W41iRGQM0D4kPY4swVgQsQmKXESk58VvRSwPK3DYWpF0sQhEFyBVMjq1/Ks4RwnowAFcbH6inlmPrL8vZGnFkn5hBx02IWgLxqiMI4VA81EcQwsBV+DRJd4ud7KEbcv8UwDDigsyADUMqJ9kJxE5jjdhpbQSrmfAa8yr1XasG48YrBT+0bswo/4r0H+BlReuU6IrOqyh7xI6GTYb96Rk6W0mS1fE1h+t5kqA/hP7nPxTH66E/4xi4Z1pfJ1My1+cwJxFTXwiL9Oo0bpKPpXEadicFDAVtnZFOfwqvn1v9lLCTMaegv5MStaR61UNB7g+PCriWw90T/AqkAg+VEQxcP9kH19+GGhQ52VYR/ifSgLiK/BmErywaHVVmzNErCUfb35ngilBO+aLhuTQ8X5yyY/mtVAc7tQtR1VQWCo/8/V1xdqV0aZJN8na8D3nbUpf03n4COcnyvXMp2Y6W+yJVD43yh762Xn8ZKcpbv60cMlgB6+/TmPK5CH3CBtny3snfO/l7J/+lOnmN95uIT14jdxCuqPtjnypevod39O9LUEvxNr5FvLhgZXtF5k5/C98ikAqZpesWZCC4hA2gL65P+VHuQZzy/DSUJB/dWqrWOW25z4afLVNv78LSMFSkpPPD6Z1LGAmzq3ZaaHW6mi8p/VcUEw077CcmwG7tbQ60Tik/aTsIhRL9TFzfJYTSCewHnB0cGJ18IitiBN08qaXgfbBGubXY3uZ62WXSgqgzvS8t69aTfsav0KnyPLQHrRE6YUbUWRBs5E1nbiNglr1eaIutTa42mFrnaUeHr1ByhJ3id5DvAQAA//+27LqGORkAAA==",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWT2/bPgy9+1PwF/8ODQon9yLJYe2KYeg/tMEuxbAqCZMYUCTPkoMVlr77IEu2ZCdeAhTYZb5YJE2afO9JdgxPOZd8ySnc8GWxQyaJTDmLJgQY2eF0IHk2GM+iKI5hThYUga/hmjOJTIqoLHPCNgij25Si0Doqy//XKcUfJheupjB6IDvUOoHXsnTr7xdxsx5GAE2NexSCbEwZAJtwx9kmTLotKA0Tka20Dkt8ZsXuQ/m/JDKRclYXMXMlFPdIwceqYn5OrRNsYj2FXzDfp8twttN91fcEXl+WhJIcvhFaIMzfMzQ9iMqZ7I0zkcY5jM5mxBPc9GJonmRAaLph00GebrZyMJsQ2Oa4ng5iI4TZnGeTMZlNxpmVRJMcleXoBsUyTzOjH62DVjyxrbf6qZ3AqnKes6Ml0zWMvhBxmyJdmYIKqiWoChZQcEcWSEFBkAkqUpCYC+wd2qa7QIXomfqQVCwqPyaoRljmfSGB1h7ap6sutLb9PjJ8XGsNF9wsrkzcuYaO4yqJ8UUO7Ylt/g2uSUFlxb7W4MyqTjvUVIu6GvLIhRKPlFe1R/ATEeb2UOwWmPcheYhmA2Y/qv7dR5FtAWttc9KQlKVs043Y9v4OdDY0+S9JANkKdk7PkCSzQObu8PmoxhWY0CkCzkC7mqwX6VP4BUgcIoBm1Hr8Y8IKMOg5KBs8jh6x/64y3w6k+darTU9IC/+OLv235wxp/kGW9yi3fFWr8xl/FihkTc0ziowzgbXdS02Xha7ZtVX4HTEN9J/KrqXu4ezc7TPaPm97Pivh1CY5oEQ42Gs23F6KYzj8mht4R5n5E6vxe+ASBSi4vrysXV/JntTrp3e55cxZx+ENcITDrXFkD9i2PLyhWKq/RAvGAMYzaLscF6blZntkWRgzvYe27b/2NOj8DgAA///TrMEwjwoAAA==",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
